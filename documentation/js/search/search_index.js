var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.718,1,2.946,2,1.371,3,0.496,4,0.427,5,0.427,6,3.124,7,0.729,8,2.106,9,4.478,10,1.517,11,0.039,12,4.753,13,3.913,14,1.011,15,3.794,16,1.682,17,1.553,18,0.622,19,0.91,20,2.557,21,3.124,22,0.496,23,0.025,24,2.089,25,1.682,26,1.682,27,3.794,28,0.031,29,0.031]],["title/modules/AppModule.html",[30,1.083,31,1.858]],["body/modules/AppModule.html",[1,2.958,2,1.533,3,0.416,4,0.358,5,0.358,11,0.039,18,0.713,19,0.763,20,2.686,21,2.62,22,0.416,23,0.021,28,0.027,29,0.027,30,1.724,31,3.639,32,1.41,33,1.41,34,1.752,35,1.752,36,1.41,37,2.627,38,1.752,39,2.62,40,2.62,41,2.62,42,2.686,43,3.001,44,2.416,45,2.335,46,1.752,47,1.568,48,3.182,49,2.63,50,3.182,51,3.182,52,3.182,53,3.182]],["title/injectables/AppService.html",[20,1.477,54,1.083]],["body/injectables/AppService.html",[3,0.528,4,0.454,5,0.454,7,0.775,8,2.189,9,4.577,11,0.039,13,3.323,14,1.076,16,1.789,17,1.614,18,0.528,19,0.968,20,2.433,22,0.528,23,0.026,26,1.789,28,0.032,29,0.032,54,1.785,55,2.222,56,3.323,57,4.037,58,4.037]],["title/controllers/AuthController.html",[0,1.083,59,1.858]],["body/controllers/AuthController.html",[0,1.422,2,1.422,3,0.515,4,0.443,5,0.443,11,0.039,18,0.721,19,0.944,22,0.515,23,0.025,24,2.167,25,1.744,28,0.031,29,0.031,59,3.014,60,3.241,61,2.782,62,3.936,63,2.338,64,3.241,65,1.422,66,2.782,67,2.782,68,1.744,69,3.936,70,3.936]],["title/modules/AuthModule.html",[30,1.083,42,1.477]],["body/modules/AuthModule.html",[2,1.561,3,0.428,4,0.368,5,0.368,11,0.039,18,0.7,19,0.784,22,0.565,23,0.021,28,0.028,29,0.028,30,1.748,32,2.143,33,1.449,34,1.8,35,1.8,36,1.449,37,2.662,38,2.662,42,2.76,44,2.143,45,2.378,46,1.8,47,1.611,49,2.027,59,2.998,63,2.627,64,2.692,71,2.692,72,2.692,73,2.692,74,3.27,75,2.678,76,3.27,77,2.692,78,2.027,79,2.692,80,2.692,81,2.692,82,1.8,83,2.692]],["title/injectables/AuthService.html",[54,1.083,63,1.329]],["body/injectables/AuthService.html",[3,0.412,4,0.355,5,0.355,7,0.605,8,1.867,11,0.039,14,1.265,16,1.867,17,1.814,18,0.551,19,0.756,22,0.412,23,0.02,25,1.396,26,2.104,28,0.027,29,0.027,54,1.523,55,1.734,63,1.867,65,2.006,66,2.227,75,1.953,82,1.734,84,2.594,85,2.993,86,4.173,87,4.747,88,2.227,89,2.594,90,3.151,91,2.319,92,2.319,93,1.244,94,1.685,95,3.151,96,3.151,97,4.214,98,3.908,99,3.151,100,2.227,101,2.594,102,2.594,103,2.227,104,2.227,105,3.151,106,3.151,107,3.151,108,2.227]],["title/classes/CreatePostDto.html",[23,0.019,109,1.477]],["body/classes/CreatePostDto.html",[3,0.161,4,0.139,5,0.139,7,0.237,10,1.796,11,0.039,14,1.197,17,1.649,18,0.491,22,0.161,23,0.017,28,0.013,29,0.013,68,0.546,78,0.764,81,1.015,93,1.619,94,1.502,108,2.654,109,1.017,110,0.546,111,3.261,112,0.871,113,0.871,114,3.284,115,2.194,116,2.194,117,2.957,118,2.194,119,2.858,120,3.799,121,1.911,122,2.858,123,2.858,124,3.755,125,2.242,126,2.065,127,2.065,128,2.944,129,3.465,130,3.58,131,3.284,132,1.7,133,3.092,134,1.232,135,1.232,136,2.065,137,2.065,138,2.065,139,2.065,140,1.232,141,1.232,142,2.152,143,2.664,144,2.065,145,2.065,146,1.7,147,1.7,148,1.28,149,2.664,150,2.065,151,3.117,152,2.065,153,1.232,154,1.232,155,1.232,156,1.883,157,3.117,158,1.232,159,1.232,160,3.471,161,1.7,162,1.7,163,2.065,164,2.065,165,2.065,166,2.065,167,1.7,168,1.7,169,1.232,170,1.232,171,2.065,172,1.7,173,2.065,174,2.065,175,2.065,176,2.065,177,2.065,178,2.065,179,2.566,180,1.232,181,1.232,182,2.566,183,2.566,184,3.117,185,3.117,186,3.117,187,3.117,188,1.232,189,3.117,190,3.117,191,1.7,192,1.232,193,2.454,194,1.459,195,1.232,196,1.232,197,2.065,198,2.065,199,2.065,200,1.232,201,1.232,202,3.117,203,1.232,204,1.232,205,1.7,206,1.7,207,1.232,208,2.664,209,1.232,210,2.065,211,2.065,212,2.152,213,2.819,214,2.454,215,2.065,216,1.015,217,2.065,218,0.607,219,1.015,220,1.015,221,0.764,222,1.232,223,0.871,224,2.454,225,3.284,226,1.232,227,1.888,228,1.015,229,1.232,230,1.232,231,1.232,232,1.015,233,1.015,234,1.232,235,1.232,236,0.871,237,0.871,238,1.015,239,1.232,240,1.883,241,1.232,242,2.065,243,1.137,244,1.232]],["title/classes/CreatePostMetaOptionsDto.html",[23,0.019,142,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.492,4,0.424,5,0.424,7,0.723,10,1.891,11,0.038,14,1.26,17,1.545,18,0.492,22,0.492,23,0.031,28,0.031,29,0.031,93,1.396,110,1.668,111,3.655,113,1.545,125,2.068,142,2.931,212,3.362,214,3.343,218,1.855,240,3.655,243,2.846,245,3.099,246,3.764,247,3.764,248,3.764]],["title/classes/CreateUserDto.html",[23,0.019,249,1.65]],["body/classes/CreateUserDto.html",[3,0.382,4,0.329,5,0.329,7,0.56,10,1.964,11,0.038,14,1.308,17,1.811,18,0.382,22,0.382,23,0.026,28,0.026,29,0.026,93,1.45,98,4.236,100,3.226,110,1.293,113,1.307,131,2.402,133,2.402,182,3.293,183,3.293,191,3.293,212,3.044,213,2.827,214,3.471,216,2.402,218,1.438,238,3.293,249,2.202,250,4.236,251,2.062,252,3.758,253,4.564,254,2.918,255,2.918,256,2.918,257,2.918,258,2.918,259,2.918,260,2.918,261,4,262,4,263,4,264,4,265,5.314,266,4,267,4.911,268,1.773,269,2.918,270,4,271,4,272,2.918,273,2.918]],["title/classes/GetUsersParamDto.html",[23,0.019,274,1.65]],["body/classes/GetUsersParamDto.html",[3,0.461,4,0.397,5,0.397,7,0.677,10,1.41,11,0.039,14,0.939,18,0.656,22,0.461,23,0.032,28,0.029,29,0.029,68,1.563,82,2.497,93,1.481,94,1.814,110,1.563,113,1.482,128,2.497,156,2.492,213,3.207,218,1.737,223,2.492,224,3.207,225,2.903,227,1.41,268,2.223,274,2.497,275,3.735,276,2.812,277,2.903,278,3.396,279,4.536,280,3.526,281,3.526,282,3.735,283,1.941]],["title/classes/PatchPostDto.html",[23,0.019,284,1.858]],["body/classes/PatchPostDto.html",[3,0.456,4,0.393,5,0.393,7,0.67,10,1.394,11,0.039,14,0.929,18,0.653,22,0.456,23,0.029,28,0.029,29,0.029,68,1.545,93,1.03,108,2.465,109,1.718,110,1.545,112,2.465,113,1.472,125,1.801,128,2.479,129,3.184,156,2.465,212,2.792,218,1.718,221,2.162,224,3.184,227,1.394,268,1.996,278,3.093,282,3.708,283,2.479,284,2.792,285,3.708,286,3.708,287,4.504,288,4.504,289,3.708,290,3.708,291,3.487,292,3.487,293,2.871,294,2.465]],["title/classes/PatchUserDto.html",[23,0.019,295,1.858]],["body/classes/PatchUserDto.html",[3,0.509,4,0.438,5,0.438,11,0.039,18,0.631,22,0.509,23,0.031,28,0.031,29,0.031,80,3.201,94,1.555,110,1.723,113,1.577,146,3.201,221,2.41,249,2.656,251,2.748,286,3.972,293,3.201,295,2.991,296,3.201,297,4.825,298,3.201,299,3.201,300,3.201,301,3.888,302,3.888,303,3.201,304,3.888,305,3.201,306,2.748]],["title/controllers/PostsController.html",[0,1.083,307,1.858]],["body/controllers/PostsController.html",[0,0.708,2,0.708,3,0.256,4,0.221,5,0.221,7,0.376,8,1.327,10,1.628,11,0.039,14,1.085,16,1.805,17,1.188,18,0.574,19,0.47,22,0.256,23,0.013,24,1.078,25,0.868,26,1.805,28,0.019,29,0.019,61,1.384,67,1.384,68,0.868,85,2.948,91,2.241,92,2.241,93,1.466,94,1.628,109,2.507,121,1.649,125,2.23,221,2.524,227,1.985,268,2.05,284,3.219,290,2.465,294,2.117,307,1.856,308,1.612,309,1.612,310,2.995,311,2.995,312,3.636,313,2.995,314,1.959,315,1.959,316,2.868,317,4.072,318,4.072,319,4.072,320,2.995,321,2.995,322,2.995,323,3.352,324,1.959,325,1.959,326,1.959,327,2.995,328,1.959,329,2.465,330,1.959,331,2.241,332,1.959,333,1.856,334,1.959,335,1.959,336,4.072,337,4.072,338,2.465,339,1.959,340,1.612,341,1.612,342,1.384,343,2.993,344,2.465,345,1.612,346,1.791,347,1.612,348,2.993,349,2.993,350,1.384,351,1.612,352,1.959,353,1.959,354,1.612,355,1.612,356,1.612,357,1.612,358,1.959,359,1.959,360,1.959,361,2.465,362,2.995,363,1.959,364,1.959,365,1.959,366,1.959,367,1.959,368,1.959]],["title/modules/PostsModule.html",[30,1.083,43,1.65]],["body/modules/PostsModule.html",[2,1.628,3,0.456,4,0.393,5,0.393,11,0.039,18,0.69,19,0.836,22,0.456,23,0.023,28,0.029,29,0.029,30,1.803,32,1.545,33,1.545,34,1.92,35,1.92,36,1.545,37,2.746,38,1.92,43,3.174,44,2.478,45,2.479,46,1.92,47,1.718,49,2.792,77,2.871,307,3.093,346,2.755,347,2.871,369,2.871,370,2.871,371,3.487,372,3.487,373,3.487]],["title/injectables/PostsService.html",[54,1.083,346,1.477]],["body/injectables/PostsService.html",[3,0.246,4,0.211,5,0.211,7,0.36,8,1.285,11,0.04,14,1.061,16,1.285,17,1.157,18,0.563,19,0.45,22,0.246,23,0.012,24,1.033,25,0.832,26,1.569,28,0.019,29,0.019,54,1.047,55,1.033,65,1.644,66,1.327,82,2.192,85,2.504,88,1.327,89,1.545,91,1.949,92,1.949,93,1.176,94,1.416,103,2.503,104,2.049,109,0.925,113,0.947,114,3.278,115,3.278,116,3.278,117,3.042,118,3.278,119,3.278,120,3.278,121,2.192,122,3.278,123,3.278,125,1.896,148,2.468,167,3.278,168,2.386,179,3.745,193,1.327,194,1.327,219,1.545,220,1.545,228,2.386,232,2.386,233,2.386,236,2.049,237,2.049,243,1.033,268,2.016,278,2.668,283,1.596,294,1.327,309,3.543,316,2.668,329,2.915,331,2.876,333,1.164,346,1.428,350,1.327,374,1.545,375,2.386,376,2.899,377,1.877,378,2.386,379,1.877,380,2.899,381,1.877,382,2.899,383,3.982,384,2.386,385,2.899,386,2.386,387,3.982,388,2.899,389,3.278,390,2.899,391,2.899,392,2.386,393,2.899,394,1.877,395,1.877,396,1.877,397,1.877,398,1.877,399,1.877,400,1.877,401,1.877,402,1.877,403,1.877]],["title/controllers/UsersController.html",[0,1.083,404,1.858]],["body/controllers/UsersController.html",[0,0.688,2,0.688,3,0.249,4,0.214,5,0.214,7,0.365,8,1.298,10,1.604,11,0.039,14,1.069,16,1.778,17,0.957,18,0.598,19,0.456,22,0.249,23,0.012,24,1.048,25,0.844,26,2.027,28,0.019,29,0.019,61,1.345,65,1.291,67,1.345,68,0.844,78,1.816,85,2.929,91,2.208,92,2.518,93,1.453,94,1.604,121,1.048,125,1.604,128,2.208,129,2.836,130,3.303,132,1.567,227,1.829,249,2.518,268,2.414,274,2.518,276,2.836,283,1.613,295,2.836,300,2.412,316,1.816,323,2.412,331,2.518,333,2.487,338,2.412,340,1.567,341,1.567,342,1.345,343,2.941,344,3.303,345,3.303,348,2.412,349,2.412,350,1.345,351,1.567,354,1.567,355,1.567,356,1.567,357,1.567,361,1.567,404,1.816,405,1.567,406,2.93,407,2.93,408,3.572,409,2.93,410,1.903,411,1.903,412,1.903,413,1.903,414,2.93,415,2.93,416,2.93,417,1.903,418,2.93,419,2.412,420,1.903,421,2.93,422,2.93,423,2.93,424,1.903,425,2.93,426,2.93,427,2.93,428,1.903,429,1.903,430,1.903,431,1.903,432,1.903,433,1.903,434,1.567,435,1.567,436,1.567,437,3.572,438,1.903,439,1.903,440,1.903,441,1.903,442,1.345,443,1.903,444,1.903,445,1.903,446,1.903,447,2.93,448,2.93,449,1.903]],["title/modules/UsersModule.html",[30,1.083,44,1.329]],["body/modules/UsersModule.html",[2,1.564,3,0.429,4,0.369,5,0.369,11,0.039,18,0.674,19,0.787,22,0.566,23,0.021,28,0.028,29,0.028,30,1.751,32,2.147,33,1.454,34,1.806,35,1.806,36,1.454,37,2.667,38,2.667,42,2.133,44,2.485,45,2.383,46,1.806,47,1.617,49,2.034,65,2.154,75,2.684,78,2.034,79,2.702,306,2.32,404,3.003,436,2.702,450,2.702,451,2.702,452,2.702,453,3.282,454,3.282,455,3.282,456,3.282,457,3.282]],["title/injectables/UsersService.html",[54,1.083,65,1.083]],["body/injectables/UsersService.html",[3,0.214,4,0.185,5,0.185,7,0.315,8,1.639,11,0.04,14,1.075,16,1.905,17,1.061,18,0.425,19,0.393,22,0.214,23,0.011,25,0.727,26,1.438,28,0.017,29,0.017,54,0.942,55,0.903,63,2.188,65,1.337,75,2.012,82,2.823,83,2.147,85,2.652,86,2.147,88,1.159,91,2.036,92,2.036,93,1.192,94,1.479,100,2.614,101,1.35,102,1.35,103,3.038,104,1.159,113,0.852,121,2.036,172,2.147,194,1.159,227,0.656,243,0.903,252,3.045,268,1.905,274,2.574,276,3.061,278,3.307,283,1.435,331,2.036,333,2.012,342,2.853,375,3.323,378,1.35,384,2.147,386,2.147,392,2.147,434,1.35,435,1.35,442,1.843,458,1.35,459,2.607,460,2.147,461,2.607,462,2.607,463,4.298,464,3.045,465,3.698,466,3.698,467,3.698,468,1.64,469,1.64,470,2.607,471,2.607,472,2.607,473,2.607,474,2.607,475,1.64,476,4.298,477,2.607,478,1.843,479,2.607,480,1.64,481,3.698,482,2.607,483,2.607,484,2.607,485,1.64,486,2.147,487,2.607,488,2.607,489,2.607,490,2.147,491,2.607,492,2.607,493,2.607,494,1.64,495,2.607,496,2.607,497,3.698,498,2.147,499,2.607,500,2.607,501,1.64,502,1.64,503,1.64,504,1.64,505,2.607,506,2.607,507,1.64]],["title/coverage.html",[508,2.88]],["body/coverage.html",[0,1.817,1,1.915,5,0.348,6,2.543,11,0.039,20,1.522,23,0.035,28,0.027,29,0.027,36,1.369,54,1.817,56,2.543,59,1.915,60,2.543,63,1.369,65,1.116,84,2.543,93,0.912,109,1.522,111,2.939,112,2.939,125,1.235,142,1.915,206,2.543,245,2.543,249,1.7,250,2.543,251,2.939,274,1.7,275,2.543,276,1.915,277,2.543,284,1.915,285,2.543,289,2.543,295,1.915,296,2.543,307,1.915,308,2.543,316,1.915,346,1.522,374,2.543,404,1.915,405,2.543,458,2.543,508,2.183,509,2.543,510,3.089,511,5.912,512,5.028,513,4.7,514,3.089,515,2.543,516,3.089,517,3.089,518,3.089,519,5.028,520,3.089,521,3.089,522,3.089]],["title/dependencies.html",[33,1.596,523,2.068]],["body/dependencies.html",[11,0.039,19,0.964,23,0.032,28,0.032,29,0.032,33,1.781,68,1.781,147,3.309,218,1.98,223,2.841,298,3.309,299,3.309,524,4.02,525,4.02,526,5.326,527,4.02,528,4.02,529,4.02,530,4.02,531,4.02,532,4.02,533,4.02,534,4.02,535,4.02,536,4.02,537,4.02]],["title/miscellaneous/enumerations.html",[538,1.557,539,2.965]],["body/miscellaneous/enumerations.html",[7,0.75,11,0.039,28,0.031,29,0.031,117,3.419,125,1.934,162,3.983,193,3.419,243,3.245,331,2.663,389,3.983,538,2.42,539,3.214,540,3.904,541,3.904,542,3.904,543,4.838,544,4.838,545,3.904,546,4.838,547,4.838]],["title/miscellaneous/functions.html",[538,1.557,548,2.965]],["body/miscellaneous/functions.html",[7,0.876,11,0.034,28,0.034,29,0.034,36,2.491,515,3.755,538,2.828,548,3.755,549,4.562]],["title/index.html",[7,0.482,550,2.512,551,2.512]],["body/index.html",[4,0.242,11,0.037,28,0.021,29,0.021,47,2.362,128,2.35,148,1.333,161,3.168,227,0.86,236,3.692,237,1.52,240,1.52,303,1.77,305,1.77,306,1.52,419,1.77,442,3.389,460,1.77,464,3.947,478,3.018,486,3.515,490,1.77,498,1.77,508,1.52,509,2.645,552,2.15,553,2.15,554,3.848,555,3.213,556,2.15,557,2.15,558,2.15,559,2.15,560,3.213,561,3.848,562,2.15,563,2.15,564,4.269,565,2.15,566,5.109,567,2.15,568,4.969,569,2.15,570,2.15,571,2.15,572,3.213,573,2.15,574,3.213,575,2.15,576,3.848,577,2.15,578,3.213,579,2.15,580,2.15,581,2.15,582,2.15,583,2.15,584,4.269,585,3.213,586,2.15,587,2.15,588,2.15,589,2.15,590,2.15,591,3.213,592,2.15,593,3.213,594,2.15,595,3.213,596,4.569,597,4.269,598,2.15,599,3.213,600,2.15,601,2.15,602,2.15,603,2.15,604,4.269,605,2.15,606,2.15,607,2.15,608,2.15,609,2.15,610,3.213,611,2.15,612,2.15,613,2.15,614,3.213,615,2.15,616,2.15,617,2.15,618,3.213,619,2.15,620,2.15,621,3.213,622,2.15,623,2.15,624,2.15,625,2.15,626,2.15,627,2.15,628,2.15,629,2.15,630,3.213,631,2.15,632,2.15,633,2.15,634,2.15,635,2.15,636,2.15,637,2.15,638,2.15,639,3.213,640,2.15,641,2.15,642,2.15,643,2.15,644,3.213,645,2.15,646,2.15,647,2.15,648,3.213,649,3.213,650,2.15,651,2.15,652,2.15,653,2.15,654,2.15,655,2.15,656,2.15,657,2.15,658,2.15,659,2.15,660,2.15,661,2.15,662,2.15,663,2.15,664,2.15,665,2.15,666,1.77]],["title/modules.html",[32,1.806]],["body/modules.html",[11,0.033,28,0.033,29,0.033,31,2.661,32,1.902,42,2.115,43,2.363,44,1.902,478,4.012,667,5.676,668,5.676,669,5.676]],["title/overview.html",[670,3.355]],["body/overview.html",[2,1.178,11,0.038,20,2.379,28,0.028,29,0.028,30,1.178,31,3.6,32,1.444,33,1.444,34,1.794,35,1.794,36,1.444,37,1.794,38,1.794,39,2.683,40,2.683,41,2.683,42,2.704,43,3.082,44,2.481,45,2.372,46,1.794,47,1.606,55,1.794,63,2.481,65,2.023,71,2.683,72,2.683,73,2.683,110,1.444,205,3.975,346,2.379,369,2.683,370,2.683,450,2.683,451,2.683,452,2.683,670,2.683,671,3.259]],["title/properties.html",[113,1.177,523,2.068]],["body/properties.html",[11,0.038,28,0.034,29,0.034,113,1.469,148,2.788,227,1.798,666,3.702,672,4.497,673,4.497,674,4.497]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":673,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":512,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["01t10:00:00z",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["02t12:00:00z",{"_index":391,"title":{},"body":{"injectables/PostsService.html":{}}}],["07",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["1",{"_index":283,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.26",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["100",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["10})@apiquery({name",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.1",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["1})@isoptional()@isint()@type(undefined",{"_index":280,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":386,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["2.1.0",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["50",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["5000",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["5000})@isstring()@isoptional",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["50})@isstring()@isnotempty()@matches(/^[a",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["6",{"_index":671,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["8601",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["9",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["add",{"_index":456,"title":{},"body":{"modules/UsersModule.html":{}}}],["additional",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{}}}],["allowing",{"_index":303,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["allows",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["amazing",{"_index":654,"title":{},"body":{"index.html":{}}}],["api",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":560,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":31,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approach",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":20,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["associated",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":59,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":42,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authservice",{"_index":63,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["avoid",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["aws",{"_index":599,"title":{},"body":{"index.html":{}}}],["backers",{"_index":655,"title":{},"body":{"index.html":{}}}],["based",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blogposting",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":647,"title":{},"body":{"index.html":{}}}],["body",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":669,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":667,"title":{},"body":{"modules.html":{}}}],["building",{"_index":555,"title":{},"body":{"index.html":{}}}],["call",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":623,"title":{},"body":{"index.html":{}}}],["characters",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["check",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["circular",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":23,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":610,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":594,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":369,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":371,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":370,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":450,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":451,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":452,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":615,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["console.log(`create",{"_index":364,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(`isauth",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(`post",{"_index":400,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(`update",{"_index":367,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(this.posts",{"_index":402,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(forwardref",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["content",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":629,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":508,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":363,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":109,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto})@post",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostmetaoptionsdto",{"_index":142,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":249,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["data",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["database",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["date('2024",{"_index":383,"title":{},"body":{"injectables/PostsService.html":{}}}],["declarations",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":625,"title":{},"body":{"index.html":{}}}],["default",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["defaultvaluepipe",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":357,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":33,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["depends",{"_index":457,"title":{},"body":{"modules/UsersModule.html":{}}}],["deploy",{"_index":584,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":598,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":591,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":609,"title":{},"body":{"index.html":{}}}],["description",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":362,"title":{},"body":{"controllers/PostsController.html":{}}}],["details.'})@apiresponse({status",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":569,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":634,"title":{},"body":{"index.html":{}}}],["direct",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{}}}],["discord",{"_index":622,"title":{},"body":{"index.html":{}}}],["dive",{"_index":624,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":509,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":385,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":389,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["dtos/create",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e.g",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreatePostDto.html":{}}}],["e2e",{"_index":579,"title":{},"body":{"index.html":{}}}],["each",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":556,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":589,"title":{},"body":{"index.html":{}}}],["email",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["ensure",{"_index":587,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":638,"title":{},"body":{"index.html":{}}}],["entries",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":539,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["enums/posttype.enum",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["error(`user",{"_index":397,"title":{},"body":{"injectables/PostsService.html":{}}}],["etc",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["experience",{"_index":627,"title":{},"body":{"index.html":{}}}],["export",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":286,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extract",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["false",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["false})@isiso8601()@isoptional()@type(undefined",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false})@isjson()@isoptional",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false})@isurl()@isoptional",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fast",{"_index":602,"title":{},"body":{"index.html":{}}}],["featured",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["features",{"_index":612,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":604,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":375,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(limit",{"_index":378,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findallbyuserid",{"_index":376,"title":{},"body":{"injectables/PostsService.html":{}}}],["findallbyuserid(userid",{"_index":380,"title":{},"body":{"injectables/PostsService.html":{}}}],["findbyid",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(getusersparamdto",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["firstname",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":611,"title":{},"body":{"index.html":{}}}],["follow",{"_index":641,"title":{},"body":{"index.html":{}}}],["format",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":398,"title":{},"body":{"injectables/PostsService.html":{}}}],["framework",{"_index":554,"title":{},"body":{"index.html":{}}}],["full",{"_index":637,"title":{},"body":{"index.html":{}}}],["function",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":548,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":607,"title":{},"body":{"index.html":{}}}],["get('/hello",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostbyid",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(@param('userid",{"_index":359,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(userid",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(limit",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":550,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(@param",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(getusersparamdto",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(limit",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":274,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusersparamdto.id?.tostring",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["graph",{"_index":632,"title":{},"body":{"index.html":{}}}],["grow",{"_index":651,"title":{},"body":{"index.html":{}}}],["hands",{"_index":626,"title":{},"body":{"index.html":{}}}],["handy",{"_index":616,"title":{},"body":{"index.html":{}}}],["headline",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hello",{"_index":58,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":630,"title":{},"body":{"index.html":{}}}],["here",{"_index":306,"title":{},"body":{"classes/PatchUserDto.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["html",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image1.jpg",{"_index":382,"title":{},"body":{"injectables/PostsService.html":{}}}],["https://example.com/image2.jpg",{"_index":390,"title":{},"body":{"injectables/PostsService.html":{}}}],["https://nestjs.com",{"_index":663,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphens",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":278,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":289,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["image",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":592,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":613,"title":{},"body":{"index.html":{}}}],["inherit",{"_index":301,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["inject",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":54,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injects",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":606,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":567,"title":{},"body":{"index.html":{}}}],["interact",{"_index":633,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":282,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["iso",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":246,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(4)@isnotempty()@apiproperty({description",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["issues",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{}}}],["isurl",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":392,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["jane@alice.com",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":644,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":646,"title":{},"body":{"index.html":{}}}],["john",{"_index":384,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":657,"title":{},"body":{"index.html":{}}}],["json",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["json.stringify(createpostdto",{"_index":365,"title":{},"body":{"controllers/PostsController.html":{}}}],["json.stringify(patchpostdto",{"_index":368,"title":{},"body":{"controllers/PostsController.html":{}}}],["json.stringify(posts",{"_index":401,"title":{},"body":{"injectables/PostsService.html":{}}}],["kamil",{"_index":660,"title":{},"body":{"index.html":{}}}],["key",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["keywords",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["lastname",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":619,"title":{},"body":{"index.html":{}}}],["legend",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":666,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":649,"title":{},"body":{"index.html":{}}}],["limit",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":643,"title":{},"body":{"index.html":{}}}],["list",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["looking",{"_index":593,"title":{},"body":{"index.html":{}}}],["loop",{"_index":640,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["make",{"_index":302,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["makes",{"_index":600,"title":{},"body":{"index.html":{}}}],["managing",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["markdown",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":596,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metadata",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"dependencies.html":{}}}],["metaoptions",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["metaoptions.dto",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metaoptions.dto.ts",{"_index":245,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:6",{"_index":247,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptions.dto.ts:9",{"_index":248,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["method",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":538,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":648,"title":{},"body":{"index.html":{}}}],["mode",{"_index":572,"title":{},"body":{"index.html":{}}}],["module",{"_index":30,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":32,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":486,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["myśliwiec",{"_index":661,"title":{},"body":{"index.html":{}}}],["name",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":635,"title":{},"body":{"index.html":{}}}],["needed",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"classes/PatchUserDto.html":{}}}],["nest",{"_index":561,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":665,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":298,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":608,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":553,"title":{},"body":{"index.html":{}}}],["npm",{"_index":566,"title":{},"body":{"index.html":{}}}],["number",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["oage",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["object",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":645,"title":{},"body":{"index.html":{}}}],["official",{"_index":597,"title":{},"body":{"index.html":{}}}],["one",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":650,"title":{},"body":{"index.html":{}}}],["operations",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":670,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":523,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":277,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":281,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":636,"title":{},"body":{"index.html":{}}}],["partial",{"_index":304,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["partialtype",{"_index":293,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":287,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":297,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":284,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":295,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["platform",{"_index":595,"title":{},"body":{"index.html":{}}}],["please",{"_index":621,"title":{},"body":{"index.html":{}}}],["position",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":590,"title":{},"body":{"index.html":{}}}],["post",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post.dto",{"_index":294,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:104",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:13",{"_index":292,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:130",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:28",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:41",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:73",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:82",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":373,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":307,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":43,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":346,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["poststatus.published",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["posttype",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.page",{"_index":388,"title":{},"body":{"injectables/PostsService.html":{}}}],["posttype.post",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["prefix",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":574,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":552,"title":{},"body":{"index.html":{}}}],["project",{"_index":564,"title":{},"body":{"index.html":{}}}],["properties",{"_index":113,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["provided",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["providers",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["public",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["query",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["query('page",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["questions",{"_index":620,"title":{},"body":{"index.html":{}}}],["read",{"_index":658,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":583,"title":{},"body":{"index.html":{}}}],["real",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["reflect",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"injectables/UsersService.html":{}}}],["replaced",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":563,"title":{},"body":{"index.html":{}}}],["request",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":603,"title":{},"body":{"index.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":614,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieves",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["return",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":544,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":568,"title":{},"body":{"index.html":{}}}],["runs",{"_index":588,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["sampletoken",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":557,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":543,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["second",{"_index":387,"title":{},"body":{"injectables/PostsService.html":{}}}],["sent",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["series",{"_index":547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":558,"title":{},"body":{"index.html":{}}}],["setup",{"_index":565,"title":{},"body":{"index.html":{}}}],["side",{"_index":559,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":605,"title":{},"body":{"index.html":{}}}],["simulate",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["smith",{"_index":393,"title":{},"body":{"injectables/PostsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":279,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":653,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":549,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":540,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":541,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":56,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":455,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:15",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":515,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":285,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":542,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":545,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:15",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:23",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:52",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":372,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":374,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:12",{"_index":394,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:41",{"_index":381,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:57",{"_index":379,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":377,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":275,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":296,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:10",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:23",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:42",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:54",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:64",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:29",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":453,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":570,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":573,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":575,"title":{},"body":{"index.html":{}}}],["started",{"_index":551,"title":{"index.html":{}},"body":{}}],["starter",{"_index":562,"title":{},"body":{"index.html":{}}}],["statements",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["stay",{"_index":639,"title":{},"body":{"index.html":{}}}],["steps",{"_index":585,"title":{},"body":{"index.html":{}}}],["story",{"_index":546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":601,"title":{},"body":{"index.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["structured",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["successfully",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":361,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":668,"title":{},"body":{"modules.html":{}}}],["table",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["take",{"_index":586,"title":{},"body":{"index.html":{}}}],["test",{"_index":578,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":581,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":580,"title":{},"body":{"index.html":{}}}],["tests",{"_index":576,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":652,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.posts",{"_index":403,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.posts.map(post",{"_index":399,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.findall(limit",{"_index":358,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findallbyuserid(userid",{"_index":360,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.users",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.users.find(user",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.findall(limit",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(getusersparamdto",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":395,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":396,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["title",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":659,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["true})@isenum(poststatus)@isnotempty",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@isint()@isnotempty",{"_index":291,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["true})@minlength(3",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":664,"title":{},"body":{"index.html":{}}}],["type",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":299,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["undefined",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isenum(posttype)@isnotempty",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":288,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["unit",{"_index":577,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":674,"title":{},"body":{"properties.html":{}}}],["update",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":290,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updatepost",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":366,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":305,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["uppercase",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["used",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["user",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":300,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":276,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":454,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":404,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":44,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":65,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["validatenested",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":672,"title":{},"body":{"properties.html":{}}}],["video",{"_index":628,"title":{},"body":{"index.html":{}}}],["visit",{"_index":618,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":631,"title":{},"body":{"index.html":{}}}],["want",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["watch",{"_index":571,"title":{},"body":{"index.html":{}}}],["website",{"_index":662,"title":{},"body":{"index.html":{}}}],["without",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["working",{"_index":617,"title":{},"body":{"index.html":{}}}],["world",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["x",{"_index":642,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":656,"title":{},"body":{"index.html":{}}}],["you're",{"_index":582,"title":{},"body":{"index.html":{}}}],["z0",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d]{8",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)[a",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hello-world')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('/hello-world')\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService], // Export AuthService if you want to use it in other modules\n  imports: [forwardRef(() =>UsersModule)], // Import other modules if needed, e.g., UsersModule for user-related\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(@Inject(forwardRef(() =>UsersService)) private readonly usersService: UsersService) {}\n\n    public login(email: string, password: string) {\n        const user = this.usersService.findOneById('1');\n        // login return SAMPLETOKEN\n        return 'SAMPLE_TOKEN';\n    }\n\n    public isAuth() {\n        return true;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Content of the post, can be HTML or Markdown', example: 'This is the content of the post.', required: false, type: String, minLength: 10, maxLength: 5000})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL of the featured image for the post', example: 'https://example.com/image.jpg', required: false})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Meta options for the post, can include additional metadata like author, keywords, etc.', type: undefined, required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of the post', enum: postType, example: undefined})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Date and time when the post should be published, in ISO 8601 format', example: '2024-07-01T10:00:00Z', required: false})@IsISO8601()@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'JSON schema for the post, can be used for structured data', example: '{\"@context\": \"https://schema.org\", \"@type\": \"BlogPosting\", \"headline\": \"My First Post\"}', required: false})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Slug for the post, must be lowercase and can only contain letters, numbers, and hyphens', example: 'my-post-slug', minLength: 3, maxLength: 50})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be lowercase and can only contain letters, numbers, and hyphens. For example: \"my-post-slug\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status of the post', enum: postStatus, example: undefined, default: undefined, required: true})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tags associated with the post, must be at least 3 characters long', example: undefined, required: false, type: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@IsNotEmpty()@ApiProperty({description: 'Title of the post', example: 'My First Post', minLength: 4, maxLength: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { postStatus } from \"../enums/postStatus.enum\";\nimport { CreatePostMetaOptionsDto } from \"./create-post-metaoptions.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\n\nexport class CreatePostDto {\n    @IsString()\n    @MinLength(4)\n    @IsNotEmpty()\n    @ApiProperty({\n        description: 'Title of the post',\n        example: 'My First Post',\n        minLength: 4,\n        maxLength: 100,\n    })\n    title: string;\n\n    @ApiProperty({\n        description: 'Type of the post',\n        enum: postType,\n        example: postType.POST,\n    })\n    @IsEnum(postType)\n    @IsNotEmpty()    \n    postType: postType;\n\n    @ApiProperty({\n        description: 'Slug for the post, must be lowercase and can only contain letters, numbers, and hyphens',\n        example: 'my-post-slug',\n        minLength: 3,\n        maxLength: 50,\n    })\n    @IsString()\n    @IsNotEmpty()\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'Slug must be lowercase and can only contain letters, numbers, and hyphens. For example: \"my-post-slug\"',\n    })\n    slug: string;\n\n    @ApiProperty({\n        description: 'Status of the post',\n        enum: postStatus,\n        example: postStatus.PUBLISHED,\n        default: postStatus.DRAFT,\n        required: true,\n    })\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    status: postStatus;\n\n    @ApiPropertyOptional({\n        description: 'Content of the post, can be HTML or Markdown',\n        example: 'This is the content of the post.',\n        required: false,\n        type: String,\n        minLength: 10,\n        maxLength: 5000,\n    })\n    @IsString()\n    @IsOptional()\n    content?: string;\n\n    @ApiPropertyOptional({\n        description: 'JSON schema for the post, can be used for structured data',\n        example: '{\"@context\": \"https://schema.org\", \"@type\": \"BlogPosting\", \"headline\": \"My First Post\"}',\n        required: false,\n    })\n    @IsJSON()\n    @IsOptional()\n    schema?: string;\n\n    @ApiPropertyOptional({\n        description: 'URL of the featured image for the post',\n        example: 'https://example.com/image.jpg',\n        required: false,\n    })\n    @IsUrl()\n    @IsOptional()\n    featuredImageUrl?: string;\n\n    @ApiPropertyOptional({\n        description: 'Date and time when the post should be published, in ISO 8601 format',\n        example: '2024-07-01T10:00:00Z',\n        required: false,\n    })\n    @IsISO8601()\n    @IsOptional()\n    @Type(() => Date)\n    publishOn: Date;\n\n    @ApiPropertyOptional({\n        description: 'Tags associated with the post, must be at least 3 characters long',\n        example: ['nestjs', 'typescript'],\n        required: false,\n        type: [String],\n    })\n    @IsOptional()\n    @IsArray()\n    @IsString({ each: true })\n    @MinLength(3, { each: true })\n    tags: string[];\n\n    @ApiPropertyOptional({\n        description: 'Meta options for the post, can include additional metadata like author, keywords, etc.',\n        type: [CreatePostMetaOptionsDto],\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                key: {\n                    type: 'string',\n                    description: 'Key for the meta option, e.g., \"sidebarEnabled\", \"keywords\"',\n                    example: 'sidebarEnabled',\n                },\n                value: {\n                    type: 'any',\n                    description: 'Any value that you want to save to the key',\n                    example: true,\n                },\n            },\n        }\n    })\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions: CreatePostMetaOptionsDto[];\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-metaoptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsString()\n    @IsNotEmpty()\n    key: string;\n\n    @IsNotEmpty()\n    value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, and one number.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    Matches,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName: string;\n\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {\n        message:\n            'Password must contain at least one uppercase letter, one lowercase letter, and one number.',\n    })\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Get user with a specific id', example: 1})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiProperty({\n        description: 'Get user with a specific id',\n        example: 1,\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the post to be updated', example: 1, required: true})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: 'The unique identifier of the post to be updated',\n        example: 1,\n        required: true,\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  // This class will inherit all properties from CreateUserDto\n  // and make them optional, allowing for partial updates.\n  // No additional properties are needed here.\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPostById\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new post', description: 'This endpoint allows you to create a new post with the provided details.'})@ApiResponse({status: 201, description: 'Post created successfully.', type: CreatePostDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreatePostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Update an existing post', description: 'This endpoint allows you to update an existing post with the provided details.'})@ApiResponse({status: 200, description: 'Post updated successfully.', type: PatchPostDto})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchPostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Param, ParseIntPipe, Patch, Post, Query } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts') \nexport class PostsController {\n\n    constructor(private readonly postsService: PostsService) {\n    }\n\n    @Get()\n    public getPosts(\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n    ) {\n        return this.postsService.findAll(limit, page);\n    }\n\n    @Get(':userId')\n    public getPostById(@Param('userId') userId: string) {\n        return this.postsService.findAllByUserId(userId);\n    }\n\n    @ApiOperation({\n        summary: 'Create a new post',\n        description: 'This endpoint allows you to create a new post with the provided details.'\n    })\n    @ApiResponse({\n        status: 201,\n        description: 'Post created successfully.',\n        type: CreatePostDto,\n    })\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto) {\n        console.log(`create post ::: ${JSON.stringify(createPostDto)}`);\n        return createPostDto;\n    }\n\n    @Patch()\n    @ApiOperation({\n        summary: 'Update an existing post',\n        description: 'This endpoint allows you to update an existing post with the provided details.'\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'Post updated successfully.',\n        type: PatchPostDto,\n    })\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        console.log(`update post ::: ${JSON.stringify(patchPostDto)}`);\n        return patchPostDto;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                posts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findAllByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n        {\n            id: '1',\n            title: 'First Post',\n            postType: postType.POST,\n            slug: 'first-post',\n            status: postStatus.PUBLISHED,\n            content: 'This is the first post.',\n            schema: '{}',\n            featuredImageUrl: 'https://example.com/image1.jpg',\n            publishOn: new Date('2024-07-01T10:00:00Z'),\n            tags: ['nestjs', 'typescript'],\n            metaOptions: [{ author: 'John Doe' }]\n        },\n        {\n            id: '2',\n            title: 'Second Page',\n            postType: postType.PAGE,\n            slug: 'second-page',\n            status: postStatus.DRAFT,\n            content: 'This is a draft page.',\n            schema: '{}',\n            featuredImageUrl: 'https://example.com/image2.jpg',\n            publishOn: new Date('2024-07-02T12:00:00Z'),\n            tags: ['page', 'draft'],\n            metaOptions: [{ author: 'Jane Smith' }]\n        }\n    ]\n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/posts.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto  } from '../dtos/create-post.dto';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/postStatus.enum';\n\n@Injectable()\nexport class PostsService {\n\n    constructor(private readonly usersService: UsersService) { }\n\n    private posts = [\n        {\n            id: '1',\n            title: 'First Post',\n            postType: postType.POST,\n            slug: 'first-post',\n            status: postStatus.PUBLISHED,\n            content: 'This is the first post.',\n            schema: '{}',\n            featuredImageUrl: 'https://example.com/image1.jpg',\n            publishOn: new Date('2024-07-01T10:00:00Z'),\n            tags: ['nestjs', 'typescript'],\n            metaOptions: [{ author: 'John Doe' }]\n        },\n        {\n            id: '2',\n            title: 'Second Page',\n            postType: postType.PAGE,\n            slug: 'second-page',\n            status: postStatus.DRAFT,\n            content: 'This is a draft page.',\n            schema: '{}',\n            featuredImageUrl: 'https://example.com/image2.jpg',\n            publishOn: new Date('2024-07-02T12:00:00Z'),\n            tags: ['page', 'draft'],\n            metaOptions: [{ author: 'Jane Smith' }]\n        }\n    ];\n\n    public findAllByUserId(userId: string) {\n\n        const user = this.usersService.findOneById(userId);\n        if (!user) {\n            throw new Error(`User with id ${userId} not found`);\n        }\n\n        const posts = this.posts.map(post => {\n            return {\n                ...post,\n                user: user\n            }\n        })\n        console.log(`Post with userId: ${JSON.stringify(posts)}`);\n        return posts;\n    }\n    public findAll(limit: number, page: number) {\n        console.log(this.posts);\n        return this.posts;\n    }\n\n   \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserById\n                            \n                            \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(getUsersParamDto: GetUsersParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', required: false, type: 'number', description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', required: false, type: 'number', description: 'The position of the oage number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Param,\n    ParseIntPipe,\n    Post,\n    Query,\n    DefaultValuePipe,\n    ValidationPipe,\n    Patch,\n\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users') \nexport class UsersController {\n\n\n    constructor(private readonly usersService: UsersService) {\n    }\n\n    @Get()\n    public getUsers(\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    ) {\n        return this.usersService.findAll(limit, page);\n    }\n\n    @Get(':id')\n    @ApiOperation({\n        summary: 'Fetches a list of registered users on the application'\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'Users fetched successfully based on the query',\n        \n    })\n    @ApiQuery({\n        name: 'limit',\n        required: false,\n        type: 'number',\n        description: 'The number of entries returned per query',\n        example: 10,\n    })\n    @ApiQuery({\n        name: 'page',\n        required: false,\n        type: 'number',\n        description: 'The position of the oage number that you want the API to return',\n        example: 1,\n    })\n    public getUserById(@Param() getUsersParamDto: GetUsersParamDto) {\n        return this.usersService.findById(getUsersParamDto);\n    }\n\n    @Post()\n    public createUser(@Body() createUserDto: CreateUserDto) {\n        console.log(createUserDto);\n        return 'you sent a post request !';\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return 'you sent a patch request !';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService], // Export UsersService if you want to use it in other modules\n  imports: [forwardRef(() => AuthModule)], // Add any other modules that UsersService depends on here\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UsersService is responsible for managing user-related operations.\nIt provides methods to find all users, find a user by ID, and check authentication status\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findById\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            Injects the AuthService to check authentication status.\nThe forwardRef is used to avoid circular dependency issues.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:42\n                        \n                    \n\n\n            \n                \n                        findAll retrieves all users with pagination support.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(getUsersParamDto: GetUsersParamDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:54\n                        \n                    \n\n\n            \n                \n                        findById retrieves a user by their ID.\nThis method uses the GetUsersParamDto to extract the user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:64\n                        \n                    \n\n\n            \n                \n                        findOneById retrieves a user by their ID.\nThis method is a more direct approach to find a user without using DTO.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n            {\n                id: '1',\n                firstName: 'John',\n                email: 'john@doe.com',\n            },\n            {\n                id: '2',\n                firstName: 'Jane',\n                email: 'jane@alice.com',\n            }\n        ]\n                    \n                \n                    \n                        \n                                Defined in src/users/providers/users.service.ts:23\n                        \n                    \n\n            \n                \n                    A private array of users to simulate a database.\nIn a real application, this would be replaced with a database call.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\n\n/**\n * UsersService is responsible for managing user-related operations.\n * It provides methods to find all users, find a user by ID, and check authentication status\n */\n@Injectable()\nexport class UsersService {\n\n    /**\n     * Injects the AuthService to check authentication status.\n     * The forwardRef is used to avoid circular dependency issues.\n     * @param authService \n     */\n    constructor(@Inject(forwardRef(() => AuthService)) private readonly authService: AuthService) {}\n\n    /**\n     * A private array of users to simulate a database.\n     * In a real application, this would be replaced with a database call.\n     */\n    private  users = [\n            {\n                id: '1',\n                firstName: 'John',\n                email: 'john@doe.com',\n            },\n            {\n                id: '2',\n                firstName: 'Jane',\n                email: 'jane@alice.com',\n            }\n        ];\n\n    /**\n     * findAll retrieves all users with pagination support.\n     * @param limit \n     * @param page \n     * @returns \n     */\n    public findAll( limit: number, page: number) {\n        const isAuth = this.authService.isAuth()\n        console.log(`isAuth: ${isAuth}`);\n        return this.users;\n    }\n\n    /**\n     * findById retrieves a user by their ID.\n     * This method uses the GetUsersParamDto to extract the user ID.\n     * @param getUsersParamDto \n     * @returns \n     */\n    public findById(getUsersParamDto : GetUsersParamDto) {\n        return this.users.find(user => user.id === getUsersParamDto.id?.toString());\n    }\n\n    /**\n     * findOneById retrieves a user by their ID.\n     * This method is a more direct approach to find a user without using DTO.\n     * @param id \n     * @returns \n     */\n    public findOneById(id : string) {\n        return this.users.find(user => user.id === id);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-metaoptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nnestjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
